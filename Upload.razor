@page "/"
@rendermode InteractiveServer
@inject IConfiguration config

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2>Subir archivos</h2>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <!-- componente para subir archivos -->
                        <InputFile OnChange="@LoadFiles" class="form-control" multiple />
                    </div>

                    @if (uploadSuccess)
                    {
                        <div class="alert alert-success" role="alert">
                            ¡Archivos subidos exitosamente!
                        </div>
                    }

                    @if (errors.Count > 0)
                    {
                        <div class="alert alert-danger" role="alert">
                            <p>Errores:</p>
                            <ul>
                                @foreach (var error in errors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (uploadedFiles.Count > 0)
                    {
                        <div class="mt-4">
                            <h3>Archivos subidos:</h3>
                            <ul class="list-group">
                                @foreach (var file in uploadedFiles)
                                {
                                    <li class="list-group-item">
                                        <!-- descargar archivos dependiendo  -->
                                        @if (CanPreviewFile(file))
                                        {
                                            <a href="javascript:void(0)" @onclick="() => ViewFile(file)">@file</a>
                                        }
                                        else
                                        {
                                            <a href="@($"/uploads/{file}")" download>@file</a> <!-- dscargar si no -->
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(selectedFile) && CanPreviewFile(selectedFile))
                    {
                        <div class="mt-4 position-relative">
                            <span class="position-absolute top-0 end-0 p-2 bg-dark text-white rounded-circle"
                                  style="cursor: pointer; opacity: 0.8;"
                                  @onclick="ClosePreview">✖</span>
                            <iframe src="@($"/uploads/{selectedFile}")" width="100%" height="600px"></iframe>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private long maxFileSize = 1024 * 1024 * 7; // 7MB
    private int maxAllowedFiles = 5;
    private List<string> errors = new();
    private bool uploadSuccess = false;
    private List<string> uploadedFiles = new();
    private string selectedFile;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();
        uploadSuccess = false;

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Intentando subir {e.FileCount} archivos, pero solo {maxAllowedFiles} archivos han sido permitidos.");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (file.Size > maxFileSize)
                {
                    errors.Add($"Error: El archivo {file.Name} excede el tamaño máximo permitido de 7MB.");
                    continue;
                }

                // usar el nombre original del archivo
                string path = Path.Combine("wwwroot", "uploads", file.Name);
                Directory.CreateDirectory(Path.Combine("wwwroot", "uploads"));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                uploadedFiles.Add(file.Name);

            }
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }

        if (errors.Count == 0)
        {
            uploadSuccess = true;
        }
    }

    private void ViewFile(string fileName)
    {
        selectedFile = fileName;
    }

    private void ClosePreview()
    {
        selectedFile = null;  // ocultar la vista previa
    }

    private bool CanPreviewFile(string fileName)
    {
        // solo permitir vista previa para archivos compatibles como PDFs e imgenes
        string extension = Path.GetExtension(fileName).ToLower();
        return extension == ".pdf" || extension == ".jpg" || extension == ".jpeg" || extension == ".png" || extension == ".gif";
    }
}
